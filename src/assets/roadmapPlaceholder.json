{
  "roadmap": [
    {
      "lessons": [
        {
          "description": "JavaScript es un lenguaje de programación multiplataforma orientado a objetos que se utiliza para hacer que las páginas web sean interactivas (por ejemplo, animaciones, botones en los que se puede hacer clic, menús emergentes, etc.). También hay versiones de JavaScript del lado del servidor, como Node.js, que permiten agregar más funcionalidad a un sitio web, como la colaboración en tiempo real entre varias computadoras. Dentro de un entorno (por ejemplo, un navegador web), JavaScript se puede conectar a los objetos de su entorno para proporcionar control programático sobre ellos.",
          "name": "Introducción a JavaScript",
          "videoUrl": "https://www.youtube.com/watch?v=2SetvwBV-SU"
        },
        {
          "description": "En JavaScript, una variable es un contenedor para almacenar datos. Las variables se declaran con las palabras clave var, let o const. Los tipos de datos en JavaScript incluyen primitivos como números, cadenas de texto, booleanos, null, undefined y símbolos. Además, JavaScript permite trabajar con tipos de datos complejos como objetos y arrays. La declaración y uso adecuado de variables es fundamental para la gestión de datos en las aplicaciones JavaScript.",
          "name": "Variables y Tipos de Datos",
          "videoUrl": "https://www.youtube.com/watch?v=tmRa0_EvMoc"
        },
        {
          "description": "JavaScript proporciona una variedad de operadores que se utilizan para realizar operaciones sobre variables y valores. Los operadores aritméticos (como +, -, *, /) se utilizan para realizar cálculos matemáticos. Los operadores de comparación (como ==, ===, !=, !==) se utilizan para comparar valores. Los operadores lógicos (como &&, ||, !) se utilizan para combinar expresiones booleanas. Además, existen operadores de asignación, bit a bit y otros operadores especiales como el operador ternario.",
          "name": "Operadores",
          "videoUrl": "https://www.youtube.com/watch?v=_8Z5AeGVIXE"
        }
      ],
      "name": "Fundamentos de JavaScript"
    },
    {
      "lessons": [
        {
          "description": "Los callbacks son funciones que se pasan como argumentos a otras funciones y se ejecutan después de que se complete una operación asincrónica. Los callbacks son fundamentales en JavaScript para manejar operaciones asincrónicas, como solicitudes a APIs, temporizadores, y eventos del DOM. Sin embargo, el uso excesivo de callbacks puede llevar a un código difícil de mantener, conocido como 'callback hell'.",
          "name": "Callbacks",
          "videoUrl": "https://www.youtube.com/watch?v=TYG2_iUr8XY"
        },
        {
          "description": "Las promesas en JavaScript son objetos que representan el eventual resultado de una operación asincrónica. Una promesa puede estar en uno de tres estados: pendiente, resuelta o rechazada. Las promesas mejoran la legibilidad del código al evitar la anidación excesiva de callbacks. Se manejan mediante los métodos then y catch, y permiten encadenar múltiples operaciones asíncronas de manera más clara.",
          "name": "Promesas",
          "videoUrl": "https://www.youtube.com/watch?v=ppzrpTjwEC8"
        },
        {
          "description": "Async/Await es una sintaxis introducida en ES8 que simplifica el trabajo con promesas. Las funciones declaradas con async devuelven una promesa y permiten el uso de la palabra clave await, que pausa la ejecución de la función hasta que la promesa se resuelva o rechace. Este enfoque hace que el código asincrónico se vea y se comporte de manera similar al código sincrónico, mejorando la legibilidad y reduciendo el riesgo de errores.",
          "name": "Async/Await",
          "videoUrl": "https://www.youtube.com/watch?v=PbI5EEpodPM"
        }
      ],
      "name": "Asincronía en JavaScript"
    },
    {
      "lessons": [
        {
          "description": "La selección de elementos del DOM (Document Object Model) en JavaScript se realiza utilizando métodos como getElementById, getElementsByClassName, getElementsByTagName, querySelector y querySelectorAll. Estos métodos permiten acceder y manipular elementos HTML específicos en la página web. Comprender cómo seleccionar elementos es fundamental para cualquier operación de manipulación del DOM, como cambiar el contenido, las clases o los estilos de los elementos seleccionados.",
          "name": "Selección de Elementos",
          "videoUrl": "https://www.youtube.com/watch?v=dF7lp_qBfV0"
        },
        {
          "description": "Los eventos en JavaScript son acciones o sucesos que ocurren en el navegador, como clics del mouse, presiones de teclas, o movimientos del mouse. Se pueden manejar eventos mediante la adición de 'event listeners' a los elementos del DOM usando métodos como addEventListener. Los eventos permiten a los desarrolladores agregar interactividad a sus páginas web. Es crucial entender el modelo de eventos, cómo se propagan los eventos (captura y burbuja) y cómo se pueden prevenir eventos predeterminados.",
          "name": "Eventos",
          "videoUrl": "https://www.youtube.com/watch?v=IQchmLGDXgU"
        },
        {
          "description": "La manipulación de contenidos en el DOM permite modificar el contenido de los elementos HTML. Esto se puede hacer utilizando propiedades como innerHTML, innerText y textContent. También se pueden crear y eliminar elementos dinámicamente utilizando métodos como createElement y removeChild. Manipular el contenido del DOM es esencial para actualizar la interfaz de usuario en respuesta a interacciones del usuario o cambios en los datos.",
          "name": "Manipulación de Contenidos",
          "videoUrl": "https://www.youtube.com/watch?v=ezjxA4o2-Ck"
        }
      ],
      "name": "Manipulación del DOM"
    },
    {
      "lessons": [
        {
          "description": "La Programación Orientada a Objetos (POO) es un paradigma de programación basado en el concepto de 'objetos', que pueden contener datos y código para manipular esos datos. En JavaScript, la POO se implementa mediante prototipos y, más recientemente, mediante la sintaxis de clases introducida en ES6. Los principios fundamentales de la POO son encapsulamiento, abstracción, herencia y polimorfismo. Estos principios permiten crear aplicaciones más modularizadas, reutilizables y fáciles de mantener.",
          "name": "Introducción a POO",
          "videoUrl": "https://www.youtube.com/watch?v=nS5FmAx4u_0"
        },
        {
          "description": "En JavaScript, una clase es una plantilla para crear objetos con propiedades y métodos predefinidos. Se pueden definir clases utilizando la sintaxis class de ES6. Los objetos son instancias de clases que contienen datos (propiedades) y funciones (métodos). El constructor es un método especial para inicializar objetos. Las clases pueden tener propiedades y métodos estáticos y de instancia. Las clases ayudan a organizar y estructurar el código de manera más lógica y modular.",
          "name": "Clases y Objetos",
          "videoUrl": "https://www.youtube.com/watch?v=C86JvqET61A"
        },
        {
          "description": "La herencia en JavaScript permite que una clase derive de otra clase, heredando sus propiedades y métodos. Se utiliza la palabra clave extends para crear una subclase que hereda de una superclase. El método super se utiliza para llamar al constructor y otros métodos de la clase padre. La herencia permite la reutilización de código y la creación de jerarquías de clases más lógicas. Este mecanismo es fundamental para implementar diseños orientados a objetos más complejos y estructurados.",
          "name": "Herencia",
          "videoUrl": "https://www.youtube.com/watch?v=1-m7xtwvH1E"
        }
      ],
      "name": "Programación Orientada a Objetos"
    }
  ]
}


http://localhost:3000/api/modulos/asignarRoadmap




{
  "roadmap": [
      {
          "lessons": [
              {
                  "description": "JavaScript es un lenguaje de programación multiplataforma orientado a objetos que se utiliza para hacer que las páginas web sean interactivas (por ejemplo, animaciones, botones en los que se puede hacer clic, menús emergentes, etc.). También hay versiones de JavaScript del lado del servidor, como Node.js, que permiten agregar más funcionalidad a un sitio web, como la colaboración en tiempo real entre varias computadoras. Dentro de un entorno (por ejemplo, un navegador web), JavaScript se puede conectar a los objetos de su entorno para proporcionar control programático sobre ellos.",
                  "name": "Introducción a JavaScript",
                  "videoUrl": "https://www.youtube.com/watch?v=2SetvwBV-SU"
              },
              {
                  "description": "En JavaScript, una variable es un contenedor para almacenar datos. Las variables se declaran con las palabras clave var, let o const. Los tipos de datos en JavaScript incluyen primitivos como números, cadenas de texto, booleanos, null, undefined y símbolos. Además, JavaScript permite trabajar con tipos de datos complejos como objetos y arrays. La declaración y uso adecuado de variables es fundamental para la gestión de datos en las aplicaciones JavaScript.",
                  "name": "Variables y Tipos de Datos",
                  "videoUrl": "https://www.youtube.com/watch?v=tmRa0_EvMoc"
              },
              {
                  "description": "JavaScript proporciona una variedad de operadores que se utilizan para realizar operaciones sobre variables y valores. Los operadores aritméticos (como +, -, *, /) se utilizan para realizar cálculos matemáticos. Los operadores de comparación (como ==, ===, !=, !==) se utilizan para comparar valores. Los operadores lógicos (como &&, ||, !) se utilizan para combinar expresiones booleanas. Además, existen operadores de asignación, bit a bit y otros operadores especiales como el operador ternario.",
                  "name": "Operadores en JavaScript",
                  "videoUrl": "https://www.youtube.com/watch?v=_8Z5AeGVIXE"
              }
          ],
          "name": "Fundamentos de JavaScript"
      },
      {
          "lessons": [
              {
                  "description": "Las estructuras de control en JavaScript permiten controlar el flujo de ejecución de un programa. Las declaraciones condicionales (if, else if, else y switch) permiten ejecutar código diferente basado en ciertas condiciones. Los bucles (for, while, do-while) permiten repetir un bloque de código varias veces. También existen declaraciones como break y continue que controlan el flujo dentro de los bucles. Estas estructuras son esenciales para crear lógica en los programas JavaScript.",
                  "name": "Estructuras de Control",
                  "videoUrl": "https://www.youtube.com/watch?v=AapgtR0Rwk0"
              },
              {
                  "description": "Las funciones en JavaScript son bloques de código reutilizables que realizan una tarea específica. Una función puede ser declarada usando la palabra clave function, seguida de un nombre, parámetros y un cuerpo de función. También se pueden crear funciones anónimas y funciones flecha (arrow functions) introducidas en ES6. Las funciones pueden recibir argumentos y devolver valores. Además, las funciones en JavaScript tienen un contexto de ejecución (this) y pueden ser anidadas y utilizadas de manera recursiva.",
                  "name": "Funciones en JavaScript",
                  "videoUrl": "https://www.youtube.com/watch?v=H6U1Pm7x60E"
              },
              {
                  "description": "Los callbacks son funciones que se pasan como argumentos a otras funciones y se ejecutan después de que se complete una operación asincrónica. Los callbacks son fundamentales en JavaScript para manejar operaciones asincrónicas, como solicitudes a APIs, temporizadores, y eventos del DOM. Sin embargo, el uso excesivo de callbacks puede llevar a un código difícil de mantener, conocido como 'callback hell'.",
                  "name": "Callbacks",
                  "videoUrl": "https://www.youtube.com/watch?v=TYG2_iUr8XY"
              }
          ],
          "name": "Programación Básica"
      },
      {
          "lessons": [
              {
                  "description": "Las promesas en JavaScript son objetos que representan el eventual resultado de una operación asincrónica. Una promesa puede estar en uno de tres estados: pendiente, resuelta o rechazada. Las promesas mejoran la legibilidad del código al evitar la anidación excesiva de callbacks. Se manejan mediante los métodos then y catch, y permiten encadenar múltiples operaciones asincrónicas de manera más clara.",
                  "name": "Promesas",
                  "videoUrl": "https://www.youtube.com/watch?v=ppzrpTjwEC8"
              },
              {
                  "description": "Async/Await es una sintaxis introducida en ES8 que simplifica el trabajo con promesas. Las funciones declaradas con async devuelven una promesa y permiten el uso de la palabra clave await, que pausa la ejecución de la función hasta que la promesa se resuelva o rechace. Este enfoque hace que el código asincrónico se vea y se comporte de manera similar al código sincrónico, mejorando la legibilidad y reduciendo el riesgo de errores.",
                  "name": "Async/Await",
                  "videoUrl": "https://www.youtube.com/watch?v=PbI5EEpodPM"
              },
              {
                  "description": "La Fetch API es una interfaz moderna para realizar solicitudes HTTP en JavaScript. Reemplaza a XMLHttpRequest y permite hacer solicitudes asíncronas de manera más sencilla y con mejor legibilidad. Fetch devuelve promesas, lo que facilita el manejo de respuestas y errores de las solicitudes. La API es flexible y soporta una amplia gama de opciones para configurar las solicitudes, como métodos HTTP, encabezados, y cuerpos de solicitud.",
                  "name": "Fetch API",
                  "videoUrl": "https://www.youtube.com/watch?v=dYB1UlGGmfk"
              }
          ],
          "name": "Manejo de Asincronía"
      },
      {
          "lessons": [
              {
                  "description": "La selección de elementos del DOM (Document Object Model) en JavaScript se realiza utilizando métodos como getElementById, getElementsByClassName, getElementsByTagName, querySelector y querySelectorAll. Estos métodos permiten acceder y manipular elementos HTML específicos en la página web. Comprender cómo seleccionar elementos es fundamental para cualquier operación de manipulación del DOM, como cambiar el contenido, las clases o los estilos de los elementos seleccionados.",
                  "name": "Selección de Elementos",
                  "videoUrl": "https://www.youtube.com/watch?v=dF7lp_qBfV0"
              },
              {
                  "description": "Los eventos en JavaScript son acciones o sucesos que ocurren en el navegador, como clics del mouse, presiones de teclas, o movimientos del mouse. Se pueden manejar eventos mediante la adición de 'event listeners' a los elementos del DOM usando métodos como addEventListener. Los eventos permiten a los desarrolladores agregar interactividad a sus páginas web. Es crucial entender el modelo de eventos, cómo se propagan los eventos (captura y burbuja) y cómo se pueden prevenir eventos predeterminados.",
                  "name": "Eventos",
                  "videoUrl": "https://www.youtube.com/watch?v=IQchmLGDXgU"
              },
              {
                  "description": "La manipulación de contenidos en el DOM permite modificar el contenido de los elementos HTML. Esto se puede hacer utilizando propiedades como innerHTML, innerText y textContent. También se pueden crear y eliminar elementos dinámicamente utilizando métodos como createElement y removeChild. Manipular el contenido del DOM es esencial para actualizar la interfaz de usuario en respuesta a interacciones del usuario o cambios en los datos.",
                  "name": "Manipulación de Contenidos",
                  "videoUrl": "https://www.youtube.com/watch?v=ezjxA4o2-Ck"
              }
          ],
          "name": "Interacción con el DOM"
      },
      {
          "lessons": [
              {
                  "description": "La Programación Orientada a Objetos (POO) es un paradigma de programación basado en el concepto de 'objetos', que pueden contener datos y código para manipular esos datos. En JavaScript, la POO se implementa mediante prototipos y, más recientemente, mediante la sintaxis de clases introducida en ES6. Los principios fundamentales de la POO son encapsulamiento, abstracción, herencia y polimorfismo. Estos principios permiten crear aplicaciones más modularizadas, reutilizables y fáciles de mantener.",
                  "name": "Introducción a POO",
                  "videoUrl": "https://www.youtube.com/watch?v=nS5FmAx4u_0"
              },
              {
                  "description": "En JavaScript, una clase es una plantilla para crear objetos con propiedades y métodos predefinidos. Se pueden definir clases utilizando la sintaxis class de ES6. Los objetos son instancias de clases que contienen datos (propiedades) y funciones (métodos). El constructor es un método especial para inicializar objetos. Las clases pueden tener propiedades y métodos estáticos y de instancia. Las clases ayudan a organizar y estructurar el código de manera más lógica y modular.",
                  "name": "Clases y Objetos",
                  "videoUrl": "https://www.youtube.com/watch?v=C86JvqET61A"
              },
              {
                  "description": "La herencia en JavaScript permite que una clase derive de otra clase, heredando sus propiedades y métodos. Se utiliza la palabra clave extends para crear una subclase que hereda de una superclase. El método super se utiliza para llamar al constructor y otros métodos de la clase padre. La herencia permite la reutilización de código y la creación de jerarquías de clases más lógicas. Este mecanismo es fundamental para implementar diseños orientados a objetos más complejos y estructurados.",
                  "name": "Herencia",
                  "videoUrl": "https://www.youtube.com/watch?v=1-m7xtwvH1E"
              }
          ],
          "name": "Programación Orientada a Objetos"
      }
  ]
}